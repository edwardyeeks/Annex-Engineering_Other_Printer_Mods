### A set of macros and homing override for the magnetic microswitch probe developed by Papejelly.
### It is based of Mental's magprobe script on Annex with simplifications down to several parameters.

### This macro features for attaching and docking the probe, checking for probe connection issues at
### specific moments and triggering error messages if something is amiss, homing override updated
### to use the magprobe and several klipper functions that needs to be updated to work with the
### magprobe.

### The gcode_macro Magprobe_Variables contains all the parameters you need to change to suit your
### printer. Update the the X and Y dock location wherever necessary. Update your travel and
### docking speeds as well.

### Please uncomment what bed levelling commands/features you use with your printer under the 
### right section. This macro also contains its own homing_override and G32 macro; please make
### sure to uncomment your own G32 macro and homing_override.
 
### Please use the G32 macro included in your print_start macros. It bundles up homing and bed
### levelling commands to execute one after another successfully without constantly attaching
### and docking the probe in between each commands.

### An example print_start with the G32 macro would look like this:
# 
# [gcode_macro print_start]
# gcode:
# 	G32                             		; home, qgl/belt_tilt/screw_tilt, home z again
#   M117 Printing!		           			; display message
# 

### Happy probing and good luck!

# Update parameters under Magprobe_Variables
[gcode_macro Magprobe_Variables]

# Dock location and docking distances.
variable_dock_location_x: 287
variable_dock_location_y: 320
variable_dock_safe_distance_y: 20       ;safe distance in Y when docking speed engages
variable_dock_safe_distance_x: 40       ;safe distance in X when docking speed engages

# Movement speeds (all in mm/min).
variable_travel_speed: 9000         ; XY travel speeds to approach the dock.
variable_dock_speed: 1000           ; XY docking speeds while attaching/docking probe.
variable_travel_speed_z: 900        ; Z travel speeds to approach the dock.
variable_dock_speed_z: 100          ; Z travel speeds to approach the dock.

# Z clearance when homing.
variable_clearance_z: 5

# Set your build plate XY size for homing in the center.
variable_build_area_x: 310
variable_build_area_y: 310

# This macro bundles up homing and other klipper functions that uses probing and executes
# them consecutively without attaching/docking the probe everytime . Uncomment what bed
# levelling feature you need or add other macros/features to it as you please. Call it
# in your print start, end and cancel macros.
[gcode_macro G32]
gcode:
    SET_GCODE_VARIABLE MACRO=Magprobe_Variables VARIABLE=consecutive_probing VALUE=True
    CONDITIONAL_HOME
    QUAD_GANTRY_LEVEL
    # BED_TILT_CALIBRATE
    # Z_TILT_ADJUST
    G28 Z
    DOCK_PROBE              ; this is needed to dock the probe everything is done.
    SET_GCODE_VARIABLE MACRO=Magprobe_Variables VARIABLE=consecutive_probing VALUE=False


#################################################################################
#################################################################################
### QGL, Bed mesh, z tilt, bed tilt. Uncomment what bed calibration you need. ###
#################################################################################
#################################################################################

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    {% set probe_consec = printer["gcode_macro Magprobe_Variables"].consecutive_probing %}
    CONDITIONAL_HOME
    ATTACH_PROBE
    _QUAD_GANTRY_LEVEL 
        {% for p in params %}
            {'%s=%s' % (p, params[p])}
        {% endfor %}
    {% if not probe_consec %}
        DOCK_PROBE
    {% endif %}
    
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set probe_consec = printer["gcode_macro Magprobe_Variables"].consecutive_probing %}
    CONDITIONAL_HOME
    ATTACH_PROBE
    _BED_MESH_CALIBRATE 
        {% for p in params %}
            {'%s=%s' % (p, params[p])}
        {% endfor %}
    {% if not probe_consec %}
        DOCK_PROBE
    {% endif %}

#[gcode_macro BED_TILT_CALIBRATE]
#rename_existing:             _BED_TILT_CALIBRATE
#gcode:
    # {% set probe_consec = printer["gcode_macro Magprobe_Variables"].consecutive_probing %}
    # CONDITIONAL_HOME
    # ATTACH_PROBE
    # _BED_TILT_CALIBRATE 
    #     {% for p in params %}
    #         {'%s=%s' % (p, params[p])}
    #     {% endfor %}
    # {% if not probe_consec %}
    #     DOCK_PROBE
    # {% endif %}
# 
#[gcode_macro Z_TILT_ADJUST]
#rename_existing:             _Z_TILT_ADJUST
#gcode:
    # {% set probe_consec = printer["gcode_macro Magprobe_Variables"].consecutive_probing %}
    # CONDITIONAL_HOME
    # ATTACH_PROBE
    # _Z_TILT_ADJUST 
    #     {% for p in params %}
    #         {'%s=%s' % (p, params[p])}
    #     {% endfor %}
    # {% if not probe_consec %}
    #     DOCK_PROBE
    # {% endif %}


####################################################################################################
####################################################################################################
### Nothing needs to be changed below unless you want to play with the code.
####################################################################################################
####################################################################################################

# Variable that can be called with a SET_GCODE_VARIABLE. It allows consecutive commands like homing,
# qgl, bed tilt etc. to be carried out without constantly attaching and docking the probe in between
# each command. Do not change it below!
[gcode_macro Magprobe_Variables]
variable_consecutive_probing: False

# gcode here is just a placeholder to fill up the command
gcode:
    QUERY_PROBE

#######################
### Homing Override ###
#######################

[homing_override]
axes: xyz
set_position_z: 0
gcode:
	#   Get Boundaries & check magprobe variables
    {% set build_x = printer["gcode_macro Magprobe_Variables"].build_area_x|float %}
    {% set build_y = printer["gcode_macro Magprobe_Variables"].build_area_y|float %}
    {% set probe_consec = printer["gcode_macro Magprobe_Variables"].consecutive_probing %}
    {% set TravelSpd = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}
    {% set TravelSpdZ = printer["gcode_macro Magprobe_Variables"].travel_speed_z|float %}
    {% set probe_z = printer.configfile.config.probe.z_offset|float %}
    {% set z_clear = printer["gcode_macro Magprobe_Variables"].clearance_z|float %}
        
    G90                                                 ; absolute mode
    G0 Z{z_clear + probe_z} F{TravelSpdZ}

    {% if not 'X' in params
    and not 'Y' in params
    and not 'Z' in params %}
        G28 X Y
        ATTACH_PROBE                                    ; attach magprobe
        G1 X{build_x / 2} Y{build_y / 2} F{TravelSpd}   ; move to middle
        G28 Z                                           ; home Z
        G0 Z{z_clear + probe_z} F{TravelSpdZ}           ; move away from bed by probe z offset and z clear
        {% if not probe_consec %}
            DOCK_PROBE                                  ; dock magprobe
        {% endif %}
    {% endif %}

    {% if 'X' in params or 'X0' in params %}
        M400
        G28 X
    {% endif %}

    {% if 'Y' in params or 'Y0' in params %}
        M400
        G28 Y
    {% endif %}

    {% if 'Z' in params or 'Z0' in params %}
        ATTACH_PROBE                                    ; attach magprobe
        G1 X{build_x / 2} Y{build_y / 2} F{TravelSpd}   ; move to middle
        G28 Z                                           ; home Z
        G0 Z{z_clear + probe_z} F{TravelSpdZ}           ; move away from bed by probe z offset and z clear
        {% if not probe_consec %}
            DOCK_PROBE                                  ; dock magprobe
        {% endif %}
    {% endif %}


#####################################################################
### Attaching and docking probe, probe check status, misc. macros ###
#####################################################################

[gcode_macro ATTACH_PROBE]
gcode:
  QUERY_PROBE
  PROBE_ATTACH_SEQUENCE
  
[gcode_macro PROBE_ATTACH_SEQUENCE]
gcode:
    # set some params referencing magprobe variables so that it's easier to type
    {% set DockX = printer["gcode_macro Magprobe_Variables"].dock_location_x|float %}
    {% set DockY = printer["gcode_macro Magprobe_Variables"].dock_location_y|float %}
    {% set TravelSpd = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}
    {% set DockSpd = printer["gcode_macro Magprobe_Variables"].dock_speed|float %}
    {% set TravelkSpdZ = printer["gcode_macro Magprobe_Variables"].travel_speed_z|float %}
    {% set probe_z = printer.configfile.config["probe"]["z_offset"]|float %}
    {% set z_clear = printer["gcode_macro Magprobe_Variables"].clearance_z|float %}
    {% set approach_y = printer["gcode_macro Magprobe_Variables"].dock_safe_distance_y|float %}

    G90                         ; absolute positioning
    CONDITIONAL_HOME            ; home if needed

    {% if printer.probe.last_query %}
        # If the toolhead is behind the dock, move forwards in Y first
        {% if printer.toolhead.position.y >= (DockY - 20) %}                
            G1 Y{DockY - 20} F{TravelSpd}   
        {% endif %} 
        
        G1 X{DockX} F{TravelSpd}
        G1 Y{DockY - approach_y}
        G1 Y{DockY} F{DockSpd}
        G1 Y{DockY - approach_y}
        CHECK_PROBE_ATTACHED
    {% endif %}


[gcode_macro DOCK_PROBE]
gcode:
    # set some params referencing magprobe variables so that it's easier to type
    {% set DockX = printer["gcode_macro Magprobe_Variables"].dock_location_x|float %}
    {% set DockY = printer["gcode_macro Magprobe_Variables"].dock_location_y|float %}
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set TravelSpd = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}
    {% set DockSpd = printer["gcode_macro Magprobe_Variables"].dock_speed|float %}
    {% set TravelkSpdZ = printer["gcode_macro Magprobe_Variables"].travel_speed_z|float %}
    {% set probe_z = printer.configfile.config["probe"]["z_offset"]|float %}
    {% set z_clear = printer["gcode_macro Magprobe_Variables"].clearance_z|float %}
    {% set approach_y = printer["gcode_macro Magprobe_Variables"].dock_safe_distance_y|float %}
    {% set decouple_x = printer["gcode_macro Magprobe_Variables"].dock_safe_distance_x|float %}

    G90                         ; absolute positioning
    CONDITIONAL_HOME            ; home if needed

    # If the toolhead is behind the dock, move forwards in Y first
    {% if printer.toolhead.position.y >= (DockY - 20) %}                
        G1 Y{DockY - 20} F{TravelSpd}   
    {% endif %} 
    
    G1 X{DockX} F{TravelSpd}
    G1 Y{DockY - 20}
    G1 Y{DockY} F{DockSpd}

    # Check which half of x the dock is located, do appropriate direction to decouple.
    {% if DockX >= (max_x / 2) %}
        G1 X{DockX - decouple_x}
    {% else %}
        G1 X{DockX + decouple_x}
    {% endif %}
    G1 Y{max_y - approach_y}
    CHECK_PROBE_DETACHED
    
[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
gcode:
    CONDITIONAL_HOME
    ATTACH_PROBE
    { action_respond_info("Please manually detach probe before calibrating with TESTZ.
    Remember to put the probe back in the dock!") }
    _PROBE_CALIBRATE 
        {% for p in params %}
            {'%s=%s' % (p, params[p])}
        {% endfor %}
    DOCK_PROBE

[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:
    CONDITIONAL_HOME
    ATTACH_PROBE
    _PROBE_ACCURACY 
        {% for p in params %}
            {'%s=%s' % (p, params[p])}
        {% endfor %}
    DOCK_PROBE

[gcode_macro CHECK_PROBE_ATTACHED]
#sanity check if probe is attached, if not it will throw out an error.
gcode:
    QUERY_PROBE
    PROBE_ATTACH_SANITY_CHECK

[gcode_macro CHECK_PROBE_DETACHED]
#sanity check if probe is detached, if not it will throw out an error.
gcode:
    QUERY_PROBE
    PROBE_DETACH_SANITY_CHECK  

[gcode_macro PROBE_ATTACH_SANITY_CHECK]
gcode:
	{% if printer.probe.last_query %}
        {action_raise_error("Probe is missing/connection issue!")}
    {% endif %}

[gcode_macro PROBE_DETACH_SANITY_CHECK]
gcode:
	{% if not printer.probe.last_query %}
        {action_raise_error("Probe is attached! Beware of collisions!")}
    {% endif %}
    
[gcode_macro CONDITIONAL_HOME]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
